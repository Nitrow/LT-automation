def Arla02():
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(2.0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  step_count_e5779561_c6c4_4c61_b172_ade4b04996c3 = 0.0
  thread Step_Counter_Thread_c2144297_12e2_4f11_b303_3a569e56cc8b():
    while (True):
      step_count_e5779561_c6c4_4c61_b172_ade4b04996c3 = step_count_e5779561_c6c4_4c61_b172_ade4b04996c3 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_c2144297_12e2_4f11_b303_3a569e56cc8b()
  global clearanceAngle=10
  global palletWidth=0.6
  global dropHeight=0.01
  global dropAngle=10
  global cycle=1
  global placeDir="D"
  global clearanceHeight=0.01
  global palletLenght=0.8
  global paperWidth=0.2316
  global pattern="1A"
  global spacing=0.02
  global paperHeight=0.32
  global pickSide="L"
  global lifetimePallets=0
  global lifetimeStacks=0
  global placeHeight=-0.1
  # begin: URCap Installation Node
  #   Source: Remote TCP & Toolpath, 1.2.65.build36, Universal Robots A/S
  #   Type: Remote TCP & Toolpath
  # end: URCap Installation Node
  global timer_1=0
  global StartPose_p=p[-.029648718793, -.387377807002, .267725419327, .000030263268, -3.141564890261, -.000046242067]
  global StartPose_q=[-1.1847947279559534, -1.2319587034038086, -2.6250529289245605, -0.8559225362590333, 1.5690820217132568, 0.3881096839904785]
  global StartCage1_p=p[-.377018104893, -.542594330944, .233918121417, -.164742166258, -3.137215116455, .000254417202]
  global StartCage1_q=[-1.9131034056292933, -1.798835893670553, -2.1877503395080566, -0.7261393827250977, 1.567793607711792, -0.2358916441546839]
  global Pregrasp1_p=p[-.377023079686, -.645690550758, .233924917795, .147175246258, 3.138126188637, -.000385834443]
  global Pregrasp1_q=[-1.8658660093890589, -1.9149991474547328, -2.0199456214904785, -0.7777179044536133, 1.5674598217010498, -0.19996720949281865]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_1_p=p[-.377050256863, -.230689822738, .236965201846, -.147314885734, -3.138132855477, -.000602609915]
  global Waypoint_1_q=[-2.1874994877747413, -1.4305364924918038, -2.5728938217111637, -0.7092795830534371, 1.5705860828439768, -0.522885036356679]
  global Waypoint_2_p=p[-.377050256683, -.155462822759, .236965201801, -.147314885742, -3.138132855590, -.000602609218]
  global Waypoint_2_q=[-2.309262604232295, -1.3521424967613491, -2.6285612802266645, -0.7319782072070371, 1.5705486604208705, -0.6446481502584973]
  global Pregrasp21_p=p[-.377061032416, -1.056699855273, .233886334595, -.164819110765, -3.137193439886, .000193679497]
  global Pregrasp21_q=[-1.7582972685443323, -2.433080335656637, -1.1206817626953125, -1.1590045255473633, 1.5655863285064697, -0.08157569566835576]
  global Pregrasp22_p=p[-.377043421129, -1.056691546771, .263614931021, -.164826440531, -3.137232900005, .000051723102]
  global Pregrasp22_q=[-1.758284870778219, -2.4122845135130824, -1.1032705307006836, -1.1973069471171875, 1.5655748844146729, -0.08140784898866826]
  global Waypoint_3_p=p[-.375946752260, -.233163217760, .238766427963, .164609822422, 3.135403668790, .012223972047]
  global Waypoint_3_q=[-2.1832478682147425, -1.4286249440959473, -2.56880521774292, -0.7230494779399415, 1.5662906169891357, -0.5056679884540003]
  global Waypoint_4_p=p[-.375933113900, -.183470474356, .238740822481, .164685123030, 3.135349232102, .012284534538]
  global Waypoint_4_q=[-2.2594130674945276, -1.374579743748047, -2.6082653999328613, -0.7374790471843262, 1.565861463546753, -0.5817378203021448]
  global Waypoint_8_p=p[.377020000000, -.542594330944, .233918121417, -.164742166254, -3.137215116462, .000254417208]
  global Waypoint_8_q=[-0.6985596966768846, -1.7988278144276375, -2.1877241274831842, -0.7262912527644483, 1.5676375217829845, 0.9786525560756605]
  global Waypoint_6_p=p[.343498715925, -.635478897563, .233957316030, -.164661812130, -3.137269351058, .000379506098]
  global Waypoint_6_q=[-0.8334148565875452, -1.8816987476744593, -2.069711208343506, -0.7613204282573243, 1.567328691482544, 0.8436627388000488]
  global Waypoint_9_p=p[.343344259008, -.220192921041, .235398152107, -.164235746727, -3.136573867164, -.001108579223]
  global Waypoint_9_q=[-0.131510082875387, -1.3584717077067872, -2.6300292015075684, -0.7251694959453125, 1.569690465927124, 1.545809268951416]
  global Waypoint_10_p=p[.343967050491, -.185914985908, .235406121667, -.164145637150, -3.136600294398, -.001068298739]
  global Waypoint_10_q=[-0.03635245958437139, -1.3156450551799317, -2.656986713409424, -0.7409523290446778, 1.569822072982788, 1.6409425735473633]
  global Waypoint_11_p=p[.343517085284, -.635444772930, .251336704162, -.164587685253, -3.137237621846, .000240422870]
  global Waypoint_11_q=[-0.8333905378924769, -1.858682771722311, -2.059696674346924, -0.7944386762431641, 1.567340612411499, 0.8437347412109375]
  global Waypoint_5_p=p[.343551203547, -1.041015867970, .236521067372, -.164494361602, -3.137171944594, .000146949009]
  global Waypoint_5_q=[-1.093193833027975, -2.3889862499632777, -1.198437213897705, -1.1254504483989258, 1.565610647201538, 0.5833616256713867]
  global Waypoint_7_p=p[.343552420056, -1.041013535651, .253298033839, -.164415156385, -3.137166234268, .000088779482]
  global Waypoint_7_q=[-1.093193833027975, -2.376547475854391, -1.1891484260559082, -1.1472152036479493, 1.565598726272583, 0.583397388458252]
  global Waypoint_12_p=p[.341332497234, -.218662567615, .233476418541, -.164105695734, -3.132037660412, -.006996297217]
  global Waypoint_12_q=[-0.12915355363954717, -1.3573458951762696, -2.6343464851379395, -0.7267740529826661, 1.5731027126312256, 1.5482254028320312]
  global Waypoint_13_p=p[.341335684011, -.179929605107, .235409595110, -.164001354722, -3.132040251107, -.007019066441]
  global Waypoint_13_q=[-0.020661656056539357, -1.302337960605957, -2.6634745597839355, -0.7521842283061524, 1.5737950801849365, 1.6566996574401855]
  global timer_1_is_counting=False
  thread Timer_Thread():
    while (True):
      if (timer_1_is_counting):
        timer_1 = timer_1 + get_steptime()
      end
      sync()
    end
  end
  run Timer_Thread()
  $ 1 "Robot Program"
  $ 2 "ResetForce"
  $ 3 "Wait is_steady()"
  while (not(is_steady())):
    sync()
  end
  $ 4 "Wait: 0.25"
  sleep(0.25)
  $ 5 "zero_ftsensor()"
  zero_ftsensor()
  $ 6 "Wait: 0.25"
  sleep(0.25)
  $ 7 "timer_1: Start"
  timer_1_is_counting = True
  $ 8 "MoveJ"
  $ 9 "StartPose" "breakAfter"
  movej(get_inverse_kin(StartPose_p, qnear=StartPose_q), a=0.6981317007977318, v=0.5235987755982988)
  $ 10 "Cage1"
  $ 11 "MoveL"
  $ 12 "StartCage1" "breakAfter"
  movel(StartCage1_p, a=1.2, v=0.25)
  $ 13 "MoveL"
  $ 14 "Pregrasp1" "breakAfter"
  movel(Pregrasp1_p, a=1.2, v=0.25)
  $ 15 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 16 "Set DO[0]=On" "noBreak"
  set_standard_digital_out(0, True)
  $ 17 "Wait: 0.5" "noBreak"
  sleep(0.5)
  end_force_mode()
  stopl(5.0)
  $ 18 "MoveL"
  $ 19 "Direction: Base Y+"
  global move_thread_flag_19=0
  thread move_thread_19():
    enter_critical
    move_thread_flag_19 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.1)
    move_thread_flag_19 = 2
    exit_critical
  end
  move_thread_flag_19 = 0
  move_thread_han_19 = run move_thread_19()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_19 > 1):
      join move_thread_han_19
      $ 20 "Until (distance)"
      break
    end
    sync()
  end
  $ 21 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 22 "MoveL"
  $ 23 "Direction: Base Y+"
  global move_thread_flag_23=0
  thread move_thread_23():
    enter_critical
    move_thread_flag_23 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.315)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_23 = 2
    exit_critical
  end
  move_thread_flag_23 = 0
  move_thread_han_23 = run move_thread_23()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_23 > 1):
      join move_thread_han_23
      $ 24 "Until (distance)"
      break
    end
    sync()
  end
  $ 25 "MoveL"
  $ 26 "Waypoint_1" "breakAfter"
  movel(Waypoint_1_p, a=1.2, v=0.25)
  $ 27 "MoveL"
  $ 28 "Waypoint_2" "breakAfter"
  movel(Waypoint_2_p, a=1.2, v=0.25)
  $ 29 "Wait: 2.0"
  sleep(2.0)
  $ 30 "MoveL"
  $ 31 "Pregrasp1" "breakAfter"
  movel(Pregrasp1_p, a=1.2, v=0.25)
  $ 32 "MoveL"
  $ 33 "Direction: Base Z+"
  global move_thread_flag_33=0
  thread move_thread_33():
    enter_critical
    move_thread_flag_33 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 0.007)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_33 = 2
    exit_critical
  end
  move_thread_flag_33 = 0
  move_thread_han_33 = run move_thread_33()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_33 > 1):
      join move_thread_han_33
      $ 34 "Until (distance)"
      break
    end
    sync()
  end
  $ 35 "MoveL"
  $ 36 "Pregrasp21" "breakAfter"
  movel(Pregrasp21_p, a=1.2, v=0.25)
  $ 37 "MoveL"
  $ 38 "Pregrasp22" "breakAfter"
  movel(Pregrasp22_p, a=1.2, v=0.3)
  $ 39 "MoveL"
  $ 40 "Direction: Base Y+"
  global move_thread_flag_40=0
  thread move_thread_40():
    enter_critical
    move_thread_flag_40 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.405)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_40 = 2
    exit_critical
  end
  move_thread_flag_40 = 0
  move_thread_han_40 = run move_thread_40()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_40 > 1):
      join move_thread_han_40
      $ 41 "Until (distance)"
      break
    end
    sync()
  end
  $ 42 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 43 "Wait: 0.7" "noBreak"
  sleep(0.7)
  end_force_mode()
  stopl(5.0)
  $ 44 "MoveL"
  $ 45 "Direction: Base Y+"
  global move_thread_flag_45=0
  thread move_thread_45():
    enter_critical
    move_thread_flag_45 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.415)
    movel(towardsPos, a=1.2, v=0.1)
    move_thread_flag_45 = 2
    exit_critical
  end
  move_thread_flag_45 = 0
  move_thread_han_45 = run move_thread_45()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_45 > 1):
      join move_thread_han_45
      $ 46 "Until (distance)"
      break
    end
    sync()
  end
  $ 47 "MoveL"
  $ 48 "Waypoint_3" "breakAfter"
  movel(Waypoint_3_p, a=1.2, v=0.3)
  $ 49 "MoveL"
  $ 50 "Waypoint_4" "breakAfter"
  movel(Waypoint_4_p, a=1.2, v=0.3)
  $ 51 "Wait: 2.0"
  sleep(2.0)
  $ 52 "MoveJ"
  $ 53 "StartPose" "breakAfter"
  movej(get_inverse_kin(StartPose_p, qnear=StartPose_q), a=0.6981317007977318, v=0.5235987755982988)
  $ 54 "timer_1: Start"
  timer_1_is_counting = True
  $ 55 "Cage2"
  $ 56 "MoveL"
  $ 57 "Waypoint_8" "breakAfter"
  movel(Waypoint_8_p, a=1.2, v=0.4)
  $ 58 "MoveL"
  $ 59 "Waypoint_6" "breakAfter"
  movel(Waypoint_6_p, a=1.2, v=0.4)
  $ 60 "Set DO[0]=On"
  set_standard_digital_out(0, True)
  $ 61 "var_1≔get_actual_tcp_pose()"
  global var_1= get_actual_tcp_pose ()
  $ 62 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 63 "Loop var_1[2] < 0.275" "noBreak"
  while (var_1[2] < 0.275):
    $ 64 "var_1≔get_actual_tcp_pose()" "noBreak"
    global var_1= get_actual_tcp_pose ()
  end
  end_force_mode()
  stopl(5.0)
  $ 65 "var_1≔get_actual_tcp_pose()"
  global var_1= get_actual_tcp_pose ()
  $ 66 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 67 "Set DO[0]=On" "noBreak"
  set_standard_digital_out(0, True)
  end_force_mode()
  stopl(5.0)
  $ 68 "MoveL"
  $ 69 "Direction: Base Y+"
  global move_thread_flag_69=0
  thread move_thread_69():
    enter_critical
    move_thread_flag_69 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_69 = 2
    exit_critical
  end
  move_thread_flag_69 = 0
  move_thread_han_69 = run move_thread_69()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_69 > 1):
      join move_thread_han_69
      $ 70 "Until (distance)"
      break
    end
    sync()
  end
  $ 71 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 72 "MoveL"
  $ 73 "Direction: Base Y+"
  global move_thread_flag_73=0
  thread move_thread_73():
    enter_critical
    move_thread_flag_73 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.315)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_73 = 2
    exit_critical
  end
  move_thread_flag_73 = 0
  move_thread_han_73 = run move_thread_73()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_73 > 1):
      join move_thread_han_73
      $ 74 "Until (distance)"
      break
    end
    sync()
  end
  $ 75 "MoveL"
  $ 76 "Waypoint_9" "breakAfter"
  movel(Waypoint_9_p, a=1.2, v=0.4)
  $ 77 "MoveL"
  $ 78 "Waypoint_10" "breakAfter"
  movel(Waypoint_10_p, a=1.2, v=0.4)
  $ 79 "Halt"
  halt
  $ 80 "MoveL"
  $ 81 "Waypoint_11" "breakAfter"
  movel(Waypoint_11_p, a=1.2, v=0.4)
  $ 82 "MoveL"
  $ 83 "Waypoint_5" "breakAfter"
  movel(Waypoint_5_p, a=1.2, v=0.4)
  $ 84 "MoveL"
  $ 85 "Waypoint_7" "breakAfter"
  movel(Waypoint_7_p, a=1.2, v=0.4)
  $ 86 "MoveL"
  $ 87 "Direction: Base Y+"
  global move_thread_flag_87=0
  thread move_thread_87():
    enter_critical
    move_thread_flag_87 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.405)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_87 = 2
    exit_critical
  end
  move_thread_flag_87 = 0
  move_thread_han_87 = run move_thread_87()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_87 > 1):
      join move_thread_han_87
      $ 88 "Until (distance)"
      break
    end
    sync()
  end
  $ 89 "var_1≔get_actual_tcp_pose()"
  global var_1= get_actual_tcp_pose ()
  $ 90 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 91 "Loop var_1[2] < 0.275" "noBreak"
  while (var_1[2] < 0.275):
    $ 92 "var_1≔get_actual_tcp_pose()" "noBreak"
    global var_1= get_actual_tcp_pose ()
  end
  end_force_mode()
  stopl(5.0)
  $ 93 "Wait: 0.5"
  sleep(0.5)
  $ 94 "MoveL"
  $ 95 "Direction: Base Y+"
  global move_thread_flag_95=0
  thread move_thread_95():
    enter_critical
    move_thread_flag_95 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.415)
    movel(towardsPos, a=0.4, v=0.2)
    move_thread_flag_95 = 2
    exit_critical
  end
  move_thread_flag_95 = 0
  move_thread_han_95 = run move_thread_95()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_95 > 1):
      join move_thread_han_95
      $ 96 "Until (distance)"
      break
    end
    sync()
  end
  $ 97 "MoveL"
  $ 98 "Waypoint_12" "breakAfter"
  movel(Waypoint_12_p, a=1.2, v=0.4)
  $ 99 "MoveL"
  $ 100 "Waypoint_13" "breakAfter"
  movel(Waypoint_13_p, a=1.2, v=0.4)
  $ 101 "timer_1: Stop"
  timer_1_is_counting = False
end
