def Arla085():
  set_safety_mode_transition_hardness(1)
  step_count_f31c8cdd_0976_4dbc_bdb2_8767777ac739 = 0.0
  thread Step_Counter_Thread_6108cee3_0f26_43db_bc36_ca076aece9a3():
    while (True):
      step_count_f31c8cdd_0976_4dbc_bdb2_8767777ac739 = step_count_f31c8cdd_0976_4dbc_bdb2_8767777ac739 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_6108cee3_0f26_43db_bc36_ca076aece9a3()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(3.0, [-0.006, -0.13, 0.065])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  # begin: URCap Installation Node
  #   Source: Remote TCP & Toolpath, 1.2.65.build36, Universal Robots A/S
  #   Type: Remote TCP & Toolpath
  # end: URCap Installation Node
  global timer_1=0
  global StartPose_p=p[-.029648718793, -.387377807002, .267725419327, .000030263268, -3.141564890261, -.000046242067]
  global StartPose_q=[-1.1847947279559534, -1.2319587034038086, -2.6250529289245605, -0.8559225362590333, 1.5690820217132568, 0.3881096839904785]
  global startCage1_p=p[.282101267713, -.499191252092, .245478016978, -.142433571879, -3.138250492196, -.000038246067]
  global startCage1_q=[-0.7497542540179651, -1.6525780163206996, -2.3400635719299316, -0.720355824833252, 1.5681517124176025, 0.9134278297424316]
  global preGraspCage11_p=p[.273632434292, -.607066022669, .273645140497, .136496051979, 3.121510562136, .302549143337]
  global preGraspCage11_q=[-0.9073851744281214, -1.760717054406637, -2.101818561553955, -0.996025876407959, 1.6945264339447021, 0.7436909675598145]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global alignCage11_p=p[.277003729874, -.636553949648, .251571975639, -.142186030064, -3.137442949224, -.000070692523]
  global alignCage11_q=[-0.9084137121783655, -1.81980623821401, -2.113452434539795, -0.7802775663188477, 1.5669348239898682, 0.7545003890991211]
  global preGraspCage12_p=p[.271613294585, -1.029922352322, .284514662412, .129725497655, 3.111347998653, .383928451436]
  global preGraspCage12_q=[-1.161605183278219, -2.3379093609251917, -1.1574912071228027, -1.4372118276408692, 1.6753551959991455, 0.4828472137451172]
  global alignCage12_p=p[.274592264137, -.642103401459, .250521108353, .132420818086, 3.116663099833, .000000494869]
  global alignCage12_q=[-0.9192903677569788, -1.827813287774557, -2.1095070838928223, -0.7614038747600098, 1.5846035480499268, 0.7380170822143555]
  global startCage21_p=p[-.557375667599, -.479415818994, .276820120788, .097308140562, 3.140085244005, -.000000000000]
  global startCage21_q=[-2.1920966104029853, -1.8437111873164875, -2.0190040329313668, -0.8496737765205351, 1.5707963513484282, -0.5593420867362529]
  global preGraspCage21_p=p[-.551216197271, -.620178789663, .272009017659, .097309813891, 3.124132193965, .312637204553]
  global preGraspCage21_q=[-2.074693028126852, -1.9872805080809535, -1.7777304649353027, -1.1262496274760743, 1.476891279220581, -0.4312694708453577]
  global alignCage21_p=p[-.557336651832, -.639504936946, .242247877762, .096905857234, 3.133990250090, -.000128954704]
  global alignCage21_q=[-2.0830705801593226, -2.0363174877562464, -1.8078207969665527, -0.8715050977519532, 1.5723392963409424, -0.44915706316103154]
  global startCage22_p=p[-.538347132491, -.609440182056, .268172305503, .096555161397, 3.133671190292, .006129169510]
  global startCage22_q=[-2.0805981794940394, -1.961562295953268, -1.8658671379089355, -0.8918946546367188, 1.5709197521209717, -0.4467108885394495]
  global preGraspCage22_p=p[-.557793946172, -1.032669003052, .283422717759, .095009555837, 3.109429789230, .408146513835]
  global preGraspCage22_q=[-1.910013500844137, -2.5508038006224574, -0.7596664428710938, -1.652914663354391, 1.490694284439087, -0.26603728929628545]
  global alignCage22_p=p[-.550349995531, -.647870650808, .248707623637, .097172485446, 3.135784087508, -.000056864808]
  global alignCage22_q=[-2.070625607167379, -2.0316292248167933, -1.8009142875671387, -0.8822606366923829, 1.5707290172576904, -0.4365447203265589]
  global startSCage_p=p[1.044119013821, -.484268556427, .276229121538, .113357764826, 3.139546849187, -.000000000000]
  global startSCage_q=[-0.28238307814536956, -2.4555745208752517, -0.9991176717324848, -1.2576967875718488, 1.570796326589793, 1.3605947121583477]
  global preGraspSCage_p=p[1.044110214935, -.613723852506, .275744770258, -.113406634650, -3.117886419822, -.301806670919]
  global preGraspSCage_q=[-0.40424853960146123, -2.606657167474264, -0.699439525604248, -1.4833262723735352, 1.7423675060272217, 1.2339091300964355]
  global alignSCage_p=p[1.044334373570, -.637925862681, .251735083007, .115794298566, 3.138514493466, -.000020704007]
  global alignSCage_q=[-0.40569812456239873, -2.6229073009886683, -0.7233247756958008, -1.365783767109253, 1.5655033588409424, 1.2397966384887695]
  global avoid1_p=p[-.451898686842, .035464519130, .478022242110, .229031571257, -2.387296507027, -1.393895340674]
  global avoid1_q=[-2.56602126756777, -1.0733392995646973, -2.3503403663635254, -1.5434234899333497, 0.4751851558685303, -1.0270846525775355]
  global avoid2_p=p[-.242971306752, -.207893654977, .592765566198, 1.685290265209, -1.444676653090, -1.125845566535]
  global avoid2_q=[-1.4018977324115198, -0.6821811956218262, -2.2308297157287598, -2.26672424892568, 0.49659085273742676, -1.2692301909076136]
  global avoid4_p=p[-.052974175971, -.314894647677, .617938714217, 1.948751241271, -.760919449067, -.682345199996]
  global avoid4_q=[-0.7035453955279749, -0.6831768316081543, -2.1914572715759277, -2.263785501519674, 0.4970824718475342, -1.2691462675677698]
  global avoid3_p=p[.282110033560, -.499200314140, .245476552278, -.142509127504, -3.138277897090, -.000096534934]
  global avoid3_q=[-0.749765698109762, -1.652602335015768, -2.3400397300720215, -0.720355824833252, 1.568199872970581, 0.9134635925292969]
  global timer_1_is_counting=False
  thread Timer_Thread():
    while (True):
      if (timer_1_is_counting):
        timer_1 = timer_1 + get_steptime()
      end
      sync()
    end
  end
  run Timer_Thread()
  $ 1 "Robot Program"
  $ 2 "resetForce"
  $ 3 "Wait is_steady()"
  while (not(is_steady())):
    sync()
  end
  $ 4 "Wait: 0.25"
  sleep(0.25)
  $ 5 "zero_ftsensor()"
  zero_ftsensor()
  $ 6 "Wait: 0.25"
  sleep(0.25)
  $ 7 "timer_1: Start"
  timer_1_is_counting = True
  $ 8 "MoveJ"
  $ 9 "StartPose" "breakAfter"
  movej(get_inverse_kin(StartPose_p, qnear=StartPose_q), a=0.6981317007977318, v=0.5235987755982988)
  $ 10 "cage1"
  $ 11 "MoveL"
  $ 12 "startCage1" "breakAfter"
  movel(startCage1_p, a=1.2, v=0.25)
  $ 13 "MoveL"
  $ 14 "preGraspCage11" "breakAfter"
  movel(preGraspCage11_p, a=1.2, v=0.4)
  $ 15 "MoveL"
  $ 16 "Direction: Base Y-"
  global move_thread_flag_16=0
  thread move_thread_16():
    enter_critical
    move_thread_flag_16 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.1)
    move_thread_flag_16 = 2
    exit_critical
  end
  move_thread_flag_16 = 0
  move_thread_han_16 = run move_thread_16()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_16
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.005, normalizedPosDir[1] * 0.005, normalizedPosDir[2] * 0.005, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 17 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 18 "MoveL"
  $ 19 "Direction: Base Z+"
  global move_thread_flag_19=0
  thread move_thread_19():
    enter_critical
    move_thread_flag_19 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 0.02)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_19 = 2
    exit_critical
  end
  move_thread_flag_19 = 0
  move_thread_han_19 = run move_thread_19()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_19 > 1):
      join move_thread_han_19
      $ 20 "Until (distance)"
      break
    end
    sync()
  end
  $ 21 "MoveL"
  $ 22 "alignCage11" "breakAfter"
  movel(alignCage11_p, a=1.2, v=0.4)
  $ 23 "Set DO[0]=On"
  set_standard_digital_out(0, True)
  $ 24 "Wait: 0.8"
  sleep(0.8)
  $ 25 "var_1â‰”get_actual_tcp_pose()"
  global var_1= get_actual_tcp_pose ()
  $ 26 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 27 "Loop var_1[2] < 0.268" "noBreak"
  while (var_1[2] < 0.268):
    $ 28 "var_1â‰”get_actual_tcp_pose()" "noBreak"
    global var_1= get_actual_tcp_pose ()
  end
  end_force_mode()
  stopl(5.0)
  $ 29 "MoveL"
  $ 30 "Direction: Base Y+"
  global move_thread_flag_30=0
  thread move_thread_30():
    enter_critical
    move_thread_flag_30 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.3)
    move_thread_flag_30 = 2
    exit_critical
  end
  move_thread_flag_30 = 0
  move_thread_han_30 = run move_thread_30()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_30 > 1):
      join move_thread_han_30
      $ 31 "Until (distance)"
      break
    end
    sync()
  end
  $ 32 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 33 "MoveL"
  $ 34 "Direction: Base Y+"
  global move_thread_flag_34=0
  thread move_thread_34():
    enter_critical
    move_thread_flag_34 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.25)
    movel(towardsPos, a=1.2, v=0.3, r=0.0)
    move_thread_flag_34 = 2
    exit_critical
  end
  move_thread_flag_34 = 0
  move_thread_han_34 = run move_thread_34()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_34 > 1):
      join move_thread_han_34
      $ 35 "Until (distance)"
      break
    end
    sync()
  end
  $ 36 "MoveL"
  $ 37 "Direction: Base Z-"
  global move_thread_flag_37=0
  thread move_thread_37():
    enter_critical
    move_thread_flag_37 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.01)
    movel(towardsPos, a=0.4, v=0.4)
    move_thread_flag_37 = 2
    exit_critical
  end
  move_thread_flag_37 = 0
  move_thread_han_37 = run move_thread_37()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_37 > 1):
      join move_thread_han_37
      $ 38 "Until (distance)"
      break
    end
    sync()
  end
  $ 39 "MoveL"
  $ 40 "Direction: Base Y+"
  global move_thread_flag_40=0
  thread move_thread_40():
    enter_critical
    move_thread_flag_40 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.085)
    movel(towardsPos, a=0.4, v=0.3)
    move_thread_flag_40 = 2
    exit_critical
  end
  move_thread_flag_40 = 0
  move_thread_han_40 = run move_thread_40()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_40 > 1):
      join move_thread_han_40
      $ 41 "Until (distance)"
      break
    end
    sync()
  end
  $ 42 "MoveL"
  $ 43 "Direction: Base Z-"
  global move_thread_flag_43=0
  thread move_thread_43():
    enter_critical
    move_thread_flag_43 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.02)
    movel(towardsPos, a=0.4, v=0.2)
    move_thread_flag_43 = 2
    exit_critical
  end
  move_thread_flag_43 = 0
  move_thread_han_43 = run move_thread_43()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_43 > 1):
      join move_thread_han_43
      $ 44 "Until (distance)"
      break
    end
    sync()
  end
  $ 45 "MoveL"
  $ 46 "Direction: Base Y+"
  global move_thread_flag_46=0
  thread move_thread_46():
    enter_critical
    move_thread_flag_46 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
    movel(towardsPos, a=0.4, v=0.2)
    move_thread_flag_46 = 2
    exit_critical
  end
  move_thread_flag_46 = 0
  move_thread_han_46 = run move_thread_46()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_46 > 1):
      join move_thread_han_46
      $ 47 "Until (distance)"
      break
    end
    sync()
  end
  $ 48 "Halt"
  halt
  $ 49 "MoveL"
  $ 50 "startCage1" "breakAfter"
  movel(startCage1_p, a=1.2, v=0.4)
  $ 51 "MoveL"
  $ 52 "preGraspCage12" "breakAfter"
  movel(preGraspCage12_p, a=1.2, v=0.4)
  $ 53 "MoveL"
  $ 54 "Direction: Base Y-"
  global move_thread_flag_54=0
  thread move_thread_54():
    enter_critical
    move_thread_flag_54 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.1)
    move_thread_flag_54 = 2
    exit_critical
  end
  move_thread_flag_54 = 0
  move_thread_han_54 = run move_thread_54()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_54
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.005, normalizedPosDir[1] * 0.005, normalizedPosDir[2] * 0.005, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 55 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 56 "MoveL"
  $ 57 "Direction: Base X+"
  global move_thread_flag_57=0
  thread move_thread_57():
    enter_critical
    move_thread_flag_57 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.03)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_57 = 2
    exit_critical
  end
  move_thread_flag_57 = 0
  move_thread_han_57 = run move_thread_57()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_57 > 1):
      join move_thread_han_57
      $ 58 "Until (distance)"
      break
    end
    sync()
  end
  $ 59 "MoveL"
  $ 60 "Direction: Base X-"
  global move_thread_flag_60=0
  thread move_thread_60():
    enter_critical
    move_thread_flag_60 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.06)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_60 = 2
    exit_critical
  end
  move_thread_flag_60 = 0
  move_thread_han_60 = run move_thread_60()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_60 > 1):
      join move_thread_han_60
      $ 61 "Until (distance)"
      break
    end
    sync()
  end
  $ 62 "MoveL"
  $ 63 "Direction: Base X+"
  global move_thread_flag_63=0
  thread move_thread_63():
    enter_critical
    move_thread_flag_63 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.03)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_63 = 2
    exit_critical
  end
  move_thread_flag_63 = 0
  move_thread_han_63 = run move_thread_63()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_63 > 1):
      join move_thread_han_63
      $ 64 "Until (distance)"
      break
    end
    sync()
  end
  $ 65 "MoveL"
  $ 66 "Direction: Base Z+"
  global move_thread_flag_66=0
  thread move_thread_66():
    enter_critical
    move_thread_flag_66 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 0.02)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_66 = 2
    exit_critical
  end
  move_thread_flag_66 = 0
  move_thread_han_66 = run move_thread_66()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_66 > 1):
      join move_thread_han_66
      $ 67 "Until (distance)"
      break
    end
    sync()
  end
  $ 68 "MoveL"
  $ 69 "alignCage12" "breakAfter"
  movel(alignCage12_p, a=1.2, v=0.4)
  $ 70 "var_1â‰”get_actual_tcp_pose()"
  global var_1= get_actual_tcp_pose ()
  $ 71 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 72 "Loop var_1[2] < 0.2685" "noBreak"
  while (var_1[2] < 0.2685):
    $ 73 "var_1â‰”get_actual_tcp_pose()" "noBreak"
    global var_1= get_actual_tcp_pose ()
  end
  end_force_mode()
  stopl(5.0)
  $ 74 "MoveL"
  $ 75 "Direction: Base Y+"
  global move_thread_flag_75=0
  thread move_thread_75():
    enter_critical
    move_thread_flag_75 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_75 = 2
    exit_critical
  end
  move_thread_flag_75 = 0
  move_thread_han_75 = run move_thread_75()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_75 > 1):
      join move_thread_han_75
      $ 76 "Until (distance)"
      break
    end
    sync()
  end
  $ 77 "MoveL"
  $ 78 "Direction: Base Y+"
  global move_thread_flag_78=0
  thread move_thread_78():
    enter_critical
    move_thread_flag_78 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.25)
    movel(towardsPos, a=1.2, v=0.25, r=0.0)
    move_thread_flag_78 = 2
    exit_critical
  end
  move_thread_flag_78 = 0
  move_thread_han_78 = run move_thread_78()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_78 > 1):
      join move_thread_han_78
      $ 79 "Until (distance)"
      break
    end
    sync()
  end
  $ 80 "MoveL"
  $ 81 "Direction: Base Z-"
  global move_thread_flag_81=0
  thread move_thread_81():
    enter_critical
    move_thread_flag_81 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.012)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_81 = 2
    exit_critical
  end
  move_thread_flag_81 = 0
  move_thread_han_81 = run move_thread_81()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_81 > 1):
      join move_thread_han_81
      $ 82 "Until (distance)"
      break
    end
    sync()
  end
  $ 83 "MoveL"
  $ 84 "Direction: Base Y+"
  global move_thread_flag_84=0
  thread move_thread_84():
    enter_critical
    move_thread_flag_84 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.085)
    movel(towardsPos, a=0.4, v=0.25)
    move_thread_flag_84 = 2
    exit_critical
  end
  move_thread_flag_84 = 0
  move_thread_han_84 = run move_thread_84()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_84 > 1):
      join move_thread_han_84
      $ 85 "Until (distance)"
      break
    end
    sync()
  end
  $ 86 "MoveL"
  $ 87 "Direction: Base Z-"
  global move_thread_flag_87=0
  thread move_thread_87():
    enter_critical
    move_thread_flag_87 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.02)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_87 = 2
    exit_critical
  end
  move_thread_flag_87 = 0
  move_thread_han_87 = run move_thread_87()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_87 > 1):
      join move_thread_han_87
      $ 88 "Until (distance)"
      break
    end
    sync()
  end
  $ 89 "MoveL"
  $ 90 "Direction: Base Y+"
  global move_thread_flag_90=0
  thread move_thread_90():
    enter_critical
    move_thread_flag_90 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_90 = 2
    exit_critical
  end
  move_thread_flag_90 = 0
  move_thread_han_90 = run move_thread_90()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_90 > 1):
      join move_thread_han_90
      $ 91 "Until (distance)"
      break
    end
    sync()
  end
  $ 92 "Halt"
  halt
  $ 93 "Wait: 2.0"
  sleep(2.0)
  $ 94 "MoveJ"
  $ 95 "StartPose" "breakAfter"
  movej(get_inverse_kin(StartPose_p, qnear=StartPose_q), a=0.6981317007977318, v=0.5235987755982988)
  $ 96 "Halt"
  halt
  $ 97 "timer_1: Start"
  timer_1_is_counting = True
  $ 98 "cage2"
  $ 99 "MoveL"
  $ 100 "startCage21" "breakAfter"
  movel(startCage21_p, a=1.2, v=0.4)
  $ 101 "MoveL"
  $ 102 "preGraspCage21" "breakAfter"
  movel(preGraspCage21_p, a=1.2, v=0.4)
  $ 103 "MoveL"
  $ 104 "Direction: Base Y-"
  global move_thread_flag_104=0
  thread move_thread_104():
    enter_critical
    move_thread_flag_104 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.1)
    move_thread_flag_104 = 2
    exit_critical
  end
  move_thread_flag_104 = 0
  move_thread_han_104 = run move_thread_104()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_104
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.005, normalizedPosDir[1] * 0.005, normalizedPosDir[2] * 0.005, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 105 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 106 "MoveL"
  $ 107 "Direction: Base Z+"
  global move_thread_flag_107=0
  thread move_thread_107():
    enter_critical
    move_thread_flag_107 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 0.02)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_107 = 2
    exit_critical
  end
  move_thread_flag_107 = 0
  move_thread_han_107 = run move_thread_107()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_107 > 1):
      join move_thread_han_107
      $ 108 "Until (distance)"
      break
    end
    sync()
  end
  $ 109 "MoveL"
  $ 110 "alignCage21" "breakAfter"
  movel(alignCage21_p, a=1.2, v=0.4)
  $ 111 "Set DO[0]=On"
  set_standard_digital_out(0, True)
  $ 112 "Wait: 0.5"
  sleep(0.5)
  $ 113 "var_1â‰”get_actual_tcp_pose()"
  global var_1= get_actual_tcp_pose ()
  $ 114 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 115 "Loop var_1[2] < 0.2685" "noBreak"
  while (var_1[2] < 0.2685):
    $ 116 "var_1â‰”get_actual_tcp_pose()" "noBreak"
    global var_1= get_actual_tcp_pose ()
  end
  end_force_mode()
  stopl(5.0)
  $ 117 "MoveL"
  $ 118 "Direction: Base Y+"
  global move_thread_flag_118=0
  thread move_thread_118():
    enter_critical
    move_thread_flag_118 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.3)
    move_thread_flag_118 = 2
    exit_critical
  end
  move_thread_flag_118 = 0
  move_thread_han_118 = run move_thread_118()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_118 > 1):
      join move_thread_han_118
      $ 119 "Until (distance)"
      break
    end
    sync()
  end
  $ 120 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 121 "MoveL"
  $ 122 "Direction: Base Y+"
  global move_thread_flag_122=0
  thread move_thread_122():
    enter_critical
    move_thread_flag_122 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.25)
    movel(towardsPos, a=1.2, v=0.3)
    move_thread_flag_122 = 2
    exit_critical
  end
  move_thread_flag_122 = 0
  move_thread_han_122 = run move_thread_122()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_122 > 1):
      join move_thread_han_122
      $ 123 "Until (distance)"
      break
    end
    sync()
  end
  $ 124 "MoveL"
  $ 125 "Direction: Base Z-"
  global move_thread_flag_125=0
  thread move_thread_125():
    enter_critical
    move_thread_flag_125 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.012)
    movel(towardsPos, a=0.4, v=0.4)
    move_thread_flag_125 = 2
    exit_critical
  end
  move_thread_flag_125 = 0
  move_thread_han_125 = run move_thread_125()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_125 > 1):
      join move_thread_han_125
      $ 126 "Until (distance)"
      break
    end
    sync()
  end
  $ 127 "MoveL"
  $ 128 "Direction: Base Y+"
  global move_thread_flag_128=0
  thread move_thread_128():
    enter_critical
    move_thread_flag_128 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.085)
    movel(towardsPos, a=0.4, v=0.4)
    move_thread_flag_128 = 2
    exit_critical
  end
  move_thread_flag_128 = 0
  move_thread_han_128 = run move_thread_128()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_128 > 1):
      join move_thread_han_128
      $ 129 "Until (distance)"
      break
    end
    sync()
  end
  $ 130 "MoveL"
  $ 131 "Direction: Base Z-"
  global move_thread_flag_131=0
  thread move_thread_131():
    enter_critical
    move_thread_flag_131 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.02)
    movel(towardsPos, a=0.4, v=0.4)
    move_thread_flag_131 = 2
    exit_critical
  end
  move_thread_flag_131 = 0
  move_thread_han_131 = run move_thread_131()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_131 > 1):
      join move_thread_han_131
      $ 132 "Until (distance)"
      break
    end
    sync()
  end
  $ 133 "MoveL"
  $ 134 "Direction: Base Y+"
  global move_thread_flag_134=0
  thread move_thread_134():
    enter_critical
    move_thread_flag_134 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
    movel(towardsPos, a=0.4, v=0.4)
    move_thread_flag_134 = 2
    exit_critical
  end
  move_thread_flag_134 = 0
  move_thread_han_134 = run move_thread_134()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_134 > 1):
      join move_thread_han_134
      $ 135 "Until (distance)"
      break
    end
    sync()
  end
  $ 136 "Halt"
  halt
  $ 137 "MoveL"
  $ 138 "startCage22" "breakAfter"
  movel(startCage22_p, a=1.2, v=0.4)
  $ 139 "MoveL"
  $ 140 "preGraspCage22" "breakAfter"
  movel(preGraspCage22_p, a=1.2, v=0.4)
  $ 141 "MoveL"
  $ 142 "Direction: Base Y-"
  global move_thread_flag_142=0
  thread move_thread_142():
    enter_critical
    move_thread_flag_142 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.1)
    move_thread_flag_142 = 2
    exit_critical
  end
  move_thread_flag_142 = 0
  move_thread_han_142 = run move_thread_142()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_142
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.002, normalizedPosDir[1] * 0.002, normalizedPosDir[2] * 0.002, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 143 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 144 "MoveL"
  $ 145 "Direction: Base X+"
  global move_thread_flag_145=0
  thread move_thread_145():
    enter_critical
    move_thread_flag_145 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.03)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_145 = 2
    exit_critical
  end
  move_thread_flag_145 = 0
  move_thread_han_145 = run move_thread_145()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_145 > 1):
      join move_thread_han_145
      $ 146 "Until (distance)"
      break
    end
    sync()
  end
  $ 147 "MoveL"
  $ 148 "Direction: Base X-"
  global move_thread_flag_148=0
  thread move_thread_148():
    enter_critical
    move_thread_flag_148 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.06)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_148 = 2
    exit_critical
  end
  move_thread_flag_148 = 0
  move_thread_han_148 = run move_thread_148()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_148 > 1):
      join move_thread_han_148
      $ 149 "Until (distance)"
      break
    end
    sync()
  end
  $ 150 "MoveL"
  $ 151 "Direction: Base X+"
  global move_thread_flag_151=0
  thread move_thread_151():
    enter_critical
    move_thread_flag_151 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.03)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_151 = 2
    exit_critical
  end
  move_thread_flag_151 = 0
  move_thread_han_151 = run move_thread_151()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_151 > 1):
      join move_thread_han_151
      $ 152 "Until (distance)"
      break
    end
    sync()
  end
  $ 153 "MoveL"
  $ 154 "Direction: Base Z+"
  global move_thread_flag_154=0
  thread move_thread_154():
    enter_critical
    move_thread_flag_154 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 0.02)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_154 = 2
    exit_critical
  end
  move_thread_flag_154 = 0
  move_thread_han_154 = run move_thread_154()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_154 > 1):
      join move_thread_han_154
      $ 155 "Until (distance)"
      break
    end
    sync()
  end
  $ 156 "MoveL"
  $ 157 "alignCage22" "breakAfter"
  movel(alignCage22_p, a=1.2, v=0.4)
  $ 158 "Set DO[0]=On"
  set_standard_digital_out(0, True)
  $ 159 "var_1â‰”get_actual_tcp_pose()"
  global var_1= get_actual_tcp_pose ()
  $ 160 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 161 "Loop var_1[2] < 0.268" "noBreak"
  while (var_1[2] < 0.268):
    $ 162 "var_1â‰”get_actual_tcp_pose()" "noBreak"
    global var_1= get_actual_tcp_pose ()
  end
  end_force_mode()
  stopl(5.0)
  $ 163 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 164 "MoveL"
  $ 165 "Direction: Base Y+"
  global move_thread_flag_165=0
  thread move_thread_165():
    enter_critical
    move_thread_flag_165 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.25)
    movel(towardsPos, a=0.4, v=0.3)
    move_thread_flag_165 = 2
    exit_critical
  end
  move_thread_flag_165 = 0
  move_thread_han_165 = run move_thread_165()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_165 > 1):
      join move_thread_han_165
      $ 166 "Until (distance)"
      break
    end
    sync()
  end
  $ 167 "MoveL"
  $ 168 "Direction: Base Z-"
  global move_thread_flag_168=0
  thread move_thread_168():
    enter_critical
    move_thread_flag_168 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.01)
    movel(towardsPos, a=0.4, v=0.4)
    move_thread_flag_168 = 2
    exit_critical
  end
  move_thread_flag_168 = 0
  move_thread_han_168 = run move_thread_168()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_168 > 1):
      join move_thread_han_168
      $ 169 "Until (distance)"
      break
    end
    sync()
  end
  $ 170 "MoveL"
  $ 171 "Direction: Base Y+"
  global move_thread_flag_171=0
  thread move_thread_171():
    enter_critical
    move_thread_flag_171 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.185)
    movel(towardsPos, a=0.4, v=0.3)
    move_thread_flag_171 = 2
    exit_critical
  end
  move_thread_flag_171 = 0
  move_thread_han_171 = run move_thread_171()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_171 > 1):
      join move_thread_han_171
      $ 172 "Until (distance)"
      break
    end
    sync()
  end
  $ 173 "MoveL"
  $ 174 "Direction: Base Z-"
  global move_thread_flag_174=0
  thread move_thread_174():
    enter_critical
    move_thread_flag_174 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.02)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_174 = 2
    exit_critical
  end
  move_thread_flag_174 = 0
  move_thread_han_174 = run move_thread_174()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_174 > 1):
      join move_thread_han_174
      $ 175 "Until (distance)"
      break
    end
    sync()
  end
  $ 176 "MoveL"
  $ 177 "Direction: Base Y+"
  global move_thread_flag_177=0
  thread move_thread_177():
    enter_critical
    move_thread_flag_177 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_177 = 2
    exit_critical
  end
  move_thread_flag_177 = 0
  move_thread_han_177 = run move_thread_177()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_177 > 1):
      join move_thread_han_177
      $ 178 "Until (distance)"
      break
    end
    sync()
  end
  $ 179 "Halt"
  halt
  $ 180 "timer_1: Stop"
  timer_1_is_counting = False
  $ 181 "sCage"
  $ 182 "MoveL"
  $ 183 "startSCage" "breakAfter"
  movel(startSCage_p, a=1.2, v=0.4)
  $ 184 "MoveL"
  $ 185 "preGraspSCage" "breakAfter"
  movel(preGraspSCage_p, a=1.2, v=0.4)
  $ 186 "MoveL"
  $ 187 "Direction: Base Y-"
  global move_thread_flag_187=0
  thread move_thread_187():
    enter_critical
    move_thread_flag_187 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.1)
    move_thread_flag_187 = 2
    exit_critical
  end
  move_thread_flag_187 = 0
  move_thread_han_187 = run move_thread_187()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_187
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.005, normalizedPosDir[1] * 0.005, normalizedPosDir[2] * 0.005, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 188 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 189 "MoveL"
  $ 190 "alignSCage" "breakAfter"
  movel(alignSCage_p, a=1.2, v=0.4)
  $ 191 "Set DO[0]=On"
  set_standard_digital_out(0, True)
  $ 192 "Wait: 0.5"
  sleep(0.5)
  $ 193 "var_1â‰”get_actual_tcp_pose()"
  global var_1= get_actual_tcp_pose ()
  $ 194 "Force"
  sleep(0.02)
  zero_ftsensor()
  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 0, 0, 0], [0.0, 10.0, 225.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
  $ 195 "Loop var_1[2] < 0.2685" "noBreak"
  while (var_1[2] < 0.2685):
    $ 196 "var_1â‰”get_actual_tcp_pose()" "noBreak"
    global var_1= get_actual_tcp_pose ()
  end
  end_force_mode()
  stopl(5.0)
  $ 197 "MoveL"
  $ 198 "Direction: Base Y+"
  global move_thread_flag_198=0
  thread move_thread_198():
    enter_critical
    move_thread_flag_198 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.3)
    move_thread_flag_198 = 2
    exit_critical
  end
  move_thread_flag_198 = 0
  move_thread_han_198 = run move_thread_198()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_198 > 1):
      join move_thread_han_198
      $ 199 "Until (distance)"
      break
    end
    sync()
  end
  $ 200 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 201 "MoveL"
  $ 202 "Direction: Base Y+"
  global move_thread_flag_202=0
  thread move_thread_202():
    enter_critical
    move_thread_flag_202 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.25)
    movel(towardsPos, a=1.2, v=0.3)
    move_thread_flag_202 = 2
    exit_critical
  end
  move_thread_flag_202 = 0
  move_thread_han_202 = run move_thread_202()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_202 > 1):
      join move_thread_han_202
      $ 203 "Until (distance)"
      break
    end
    sync()
  end
  $ 204 "MoveL"
  $ 205 "Direction: Base Z-"
  global move_thread_flag_205=0
  thread move_thread_205():
    enter_critical
    move_thread_flag_205 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.012)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_205 = 2
    exit_critical
  end
  move_thread_flag_205 = 0
  move_thread_han_205 = run move_thread_205()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_205 > 1):
      join move_thread_han_205
      $ 206 "Until (distance)"
      break
    end
    sync()
  end
  $ 207 "MoveL"
  $ 208 "Direction: Base Y+"
  global move_thread_flag_208=0
  thread move_thread_208():
    enter_critical
    move_thread_flag_208 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.085)
    movel(towardsPos, a=0.4, v=0.3)
    move_thread_flag_208 = 2
    exit_critical
  end
  move_thread_flag_208 = 0
  move_thread_han_208 = run move_thread_208()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_208 > 1):
      join move_thread_han_208
      $ 209 "Until (distance)"
      break
    end
    sync()
  end
  $ 210 "MoveL"
  $ 211 "Direction: Base Z-"
  global move_thread_flag_211=0
  thread move_thread_211():
    enter_critical
    move_thread_flag_211 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.02)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_211 = 2
    exit_critical
  end
  move_thread_flag_211 = 0
  move_thread_han_211 = run move_thread_211()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_211 > 1):
      join move_thread_han_211
      $ 212 "Until (distance)"
      break
    end
    sync()
  end
  $ 213 "MoveL"
  $ 214 "Direction: Base Y+"
  global move_thread_flag_214=0
  thread move_thread_214():
    enter_critical
    move_thread_flag_214 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.4)
    move_thread_flag_214 = 2
    exit_critical
  end
  move_thread_flag_214 = 0
  move_thread_han_214 = run move_thread_214()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_214 > 1):
      join move_thread_han_214
      $ 215 "Until (distance)"
      break
    end
    sync()
  end
  $ 216 "Halt"
  halt
  $ 217 "avoidStack"
  $ 218 "MoveJ"
  $ 219 "avoid1" "breakAfter"
  movej(get_inverse_kin(avoid1_p, qnear=avoid1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 220 "avoid2" "breakAfter"
  movej(get_inverse_kin(avoid2_p, qnear=avoid2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 221 "avoid4" "breakAfter"
  movej(get_inverse_kin(avoid4_p, qnear=avoid4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 222 "avoid3" "breakAfter"
  movej(get_inverse_kin(avoid3_p, qnear=avoid3_q), a=1.3962634015954636, v=1.0471975511965976)
end
